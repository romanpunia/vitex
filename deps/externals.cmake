# Include headers and libraries of external dependencies
set(VI_OPENSSL ON CACHE BOOL "Enable openssl library")
set(VI_ZLIB ON CACHE BOOL "Enable zlib library")
set(VI_MONGOC ON CACHE BOOL "Enable mongo-c-driver library")
set(VI_POSTGRESQL ON CACHE BOOL "Enable libpq library")
set(VI_SQLITE ON CACHE BOOL "Enable sqlite library")
if (VI_OPENSSL)
	find_path(EXTERN_INCLUDE openssl/aes.h)
	find_library(EXTERN_LIB1 ssl)
	find_library(EXTERN_LIB2 crypto)
	if (EXTERN_INCLUDE AND EXTERN_LIB1 AND EXTERN_LIB2)
		target_compile_definitions(vitex PRIVATE -DVI_OPENSSL)
		target_include_directories(vitex PRIVATE ${EXTERN_INCLUDE})
		target_link_libraries(vitex PRIVATE ${EXTERN_LIB1} ${EXTERN_LIB2})
		message(STATUS "Load library @openssl - OK")
	else()
		message("Load library @openssl - not found")
	endif()
    unset(EXTERN_INCLUDE CACHE)
    unset(EXTERN_LIB1 CACHE)
    unset(EXTERN_LIB2 CACHE)
endif()
if (VI_ZLIB)
	find_path(EXTERN_INCLUDE zlib.h)
	find_library(EXTERN_LIB zlib)
	if (EXTERN_INCLUDE AND EXTERN_LIB)
		target_compile_definitions(vitex PRIVATE -DVI_ZLIB)
		target_include_directories(vitex PRIVATE ${EXTERN_INCLUDE})
		target_link_libraries(vitex PRIVATE ${EXTERN_LIB})
		message(STATUS "Load library @zlib - OK")
	else()
		message("Load library @zlib - not found")
	endif()
    unset(EXTERN_INCLUDE CACHE)
    unset(EXTERN_LIB CACHE)
endif()
if (VI_MONGOC)
	find_path(EXTERN_INCLUDE1 mongoc.h PATH_SUFFIXES libmongoc-1.0)
	find_path(EXTERN_INCLUDE2 bson.h PATH_SUFFIXES libbson-1.0)
	find_library(EXTERN_LIB1 mongoc-1.0)
	find_library(EXTERN_LIB2 bson-1.0)
	if (EXTERN_INCLUDE1 AND EXTERN_INCLUDE2 AND EXTERN_LIB1 AND EXTERN_LIB2)
		target_compile_definitions(vitex PRIVATE -DVI_MONGOC)
		target_include_directories(vitex PRIVATE ${EXTERN_INCLUDE1} ${EXTERN_INCLUDE2})
		target_link_libraries(vitex PRIVATE ${EXTERN_LIB1} ${EXTERN_LIB2})
		message(STATUS "Load library @mongoc/@bson - OK")
	else()
		message("Load library @mongoc/@bson - not found")
	endif()
    unset(EXTERN_INCLUDE1 CACHE)
    unset(EXTERN_INCLUDE2 CACHE)
    unset(EXTERN_LIB1 CACHE)
    unset(EXTERN_LIB2 CACHE)
endif()
if (VI_POSTGRESQL)
	find_path(EXTERN_INCLUDE libpq-fe.h PATH_SUFFIXES libpq PATHS
		/usr/include/postgresql
		/usr/local/opt/libpq/include)
	find_library(EXTERN_LIB NAMES pq libpq PATH_SUFFIXES lib)
	if (EXTERN_INCLUDE AND EXTERN_LIB)
		target_compile_definitions(vitex PRIVATE -DVI_POSTGRESQL)
		target_include_directories(vitex PRIVATE ${EXTERN_INCLUDE})
		target_link_libraries(vitex PRIVATE ${EXTERN_LIB})
		message(STATUS "Load library @libpq - OK")
	else()
		message("Load library @libpq - not found")
	endif()
    unset(EXTERN_INCLUDE CACHE)
    unset(EXTERN_LIB CACHE)
endif()
if (VI_SQLITE)
	find_path(EXTERN_INCLUDE sqlite3.h)
	find_library(EXTERN_LIB sqlite3)
	if (EXTERN_INCLUDE AND EXTERN_INCLUDE)
		target_compile_definitions(vitex PRIVATE -DVI_SQLITE)
		target_include_directories(vitex PRIVATE ${EXTERN_INCLUDE})
		target_link_libraries(vitex PRIVATE ${EXTERN_LIB})
		message(STATUS "Load library @sqlite - OK")
	else()
		message("Load library @sqlite - not found")
	endif()
    unset(EXTERN_INCLUDE CACHE)
    unset(EXTERN_LIB CACHE)
endif()